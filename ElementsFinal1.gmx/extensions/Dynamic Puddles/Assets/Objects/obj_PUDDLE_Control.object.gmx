<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is our puddle controller object. It will be in charge of "catching" the puddle objects, 
// drawing them to the screen, and then finally drawing them to a surface or destroying them 
// (depending on the option choosen by you). For the system to work this object MUST BE PRESENT
// IN THE ROOM, otherwise you will get errors. You should probably set it at a higher depth than 
// most of the other instances so that it is drawn under everything else.

// To prepare the object, you need to run the script "scr_PUDDLE_Init", which enables you to 
// switch surfaces on/off and set the quality for the surface drawing. Note that the quality 
// value is scalar, with 1 being maximum quality, 2 being half quality, 3 being 1/3 quality etc...

// If you set surface drawing to false, quality is ignored, no surface will be made, and the 
// puddle objects will fade out over time, rather than stay on the screen. Due to the need 
// for different blend modes, the surface version and the instance versions will look slightly 
// different. This can't be helped, unfortunately.

// To use this simply drop this object into any room, and then use the "scr_PUDDLE_Create"
// script to start creating puddles (from any object)

/////////////////////////////////////////////////////////////////////////////////////////
// IMPORTANT!!! The blend modes used will NOT work on Android, Tizen, iOS, nor HTML5.  //
// Basically, this is a desktop only effect                                            //
/////////////////////////////////////////////////////////////////////////////////////////

scr_PUDDLE_Init(true, 2);

// This variable holds the colour for the puddle. It's not necessary, but is included for the 
// sake of the demo... you can set it to whatever you require, or add a colour directly from  
// the creation script that you call "scr_PUDDLE_Create".

blend = c_red;








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We need to clean up the puddle surface and free the memory associated with it, 
// so we call this script. Don't worry if you have the surface effect off, as the 
// script will cope with that too.

scr_PUDDLE_Cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Here we call the script that creates the puddles. this script can be called 
// from ANY INSTANCE at ANY TIME, without any issues. Please see the script itself
// for a description of the arguments.

scr_PUDDLE_Create(mouse_x, mouse_y, 0.25, 1, blend, 64, 0.1, 1 + irandom(5), 0.01);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We need to clean up the puddle surface and free the memory associated with it, 
// so we call this script. Don't worry if you have the surface effect off, as the 
// script will cope with that too.

scr_PUDDLE_Cleanup();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// We need to draw the puddle surface and/or the puddles themselves.
// the script below does everything and will adapt to the different 
// quality and draw options (either to the surface, or as fading instances).

scr_PUDDLE_Draw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is only really in for the DEMO, but it's a script for clearing the 
// puddle surface.

scr_PUDDLE_Clear();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
