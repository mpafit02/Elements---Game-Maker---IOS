<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PUDDLE</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is the puddle object. You shouldn't change much in this, but you can use your own 
// sprites if you wish (the code should adapt). This object is NOT visible and will actually 
// be drawn using the puddle controller object. DO NOT CHANGE THE OBJECT NAME!

// First initialise the sprite properties (these will be set to the required values 
// when you create the puddle using the script "scr_PUDDLE_Create".

image_xscale = 0;                           // Sets the image x/y scale to 0
image_yscale = 0;
image_index = irandom(image_number - 1);    // Selects a random sprite subimage...
image_angle = random(360);                  // Selects a random angle...
image_speed = 0;                            // Stops sprite animation...
image_alpha = 0.5;                          // Sets the base image_alpha... changing this will have VERY different effects!

// Now we initialise the puddle "spread" speed. This is the value that the sprite will 
// be scaled by each step, based on a spreading algorithm that I use in the draw script.

spd = 0.01;

// We also need to initialise the maximum scale for the sprite (at which point it will 
// be drawn to the surface).

max_s = 1;

// Finally, we initialise the fade value. This is used ONLY when surfaces are not 
// available and controls how fast the instance will fade from view.

fade = 0.01;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
